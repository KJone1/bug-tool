[{"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\index.tsx":"1","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\App.tsx":"2","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\bugform.tsx":"3","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\axios.tsx":"4","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\loadingScreen.tsx":"5","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\styles\\colors.js":"6","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\Bug List\\openBugList.tsx":"7","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\Bug List\\closedBugList.tsx":"8","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\sortButton.tsx":"9","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\addBugButton.tsx":"10","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\deleteButton.tsx":"11","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\completeButton.tsx":"12"},{"size":314,"mtime":1611920221503,"results":"13","hashOfConfig":"14"},{"size":1939,"mtime":1612369061214,"results":"15","hashOfConfig":"14"},{"size":4190,"mtime":1612369023022,"results":"16","hashOfConfig":"14"},{"size":1629,"mtime":1612260467799,"results":"17","hashOfConfig":"14"},{"size":405,"mtime":1612002040469,"results":"18","hashOfConfig":"14"},{"size":334,"mtime":1612368328337,"results":"19","hashOfConfig":"14"},{"size":4027,"mtime":1612369485494,"results":"20","hashOfConfig":"14"},{"size":2963,"mtime":1612180995484,"results":"21","hashOfConfig":"14"},{"size":1349,"mtime":1612260327751,"results":"22","hashOfConfig":"14"},{"size":876,"mtime":1612120427711,"results":"23","hashOfConfig":"14"},{"size":1328,"mtime":1612180211962,"results":"24","hashOfConfig":"14"},{"size":1784,"mtime":1612180211961,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"5s1u2e",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\index.tsx",[],["59","60"],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\App.tsx",[],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\bugform.tsx",["61","62"],"import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n  Input,\r\n  HStack,\r\n  Flex,\r\n  Radio,\r\n  RadioGroup,\r\n  Select,\r\n  Button,\r\n  useToast,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst BugForm = () => {\r\n  const [bugName, SetBugName] = useState(\"\");\r\n  const [bugDescription, SetBugDesc] = useState(\"\");\r\n  const [repeatable, SetRepeatable] = useState(\"\");\r\n  const [submitter, SetSubmitter] = useState(\"\");\r\n  const [version, SetVersion] = useState(\"\");\r\n  const [isSubmitting, SetSubmit] = useState(false);\r\n  const toast = useToast();\r\n\r\n  function NewDBEntry(e: any) {\r\n    e.preventDefault();\r\n    const newBug = {\r\n      BugName: bugName,\r\n      BugDescription: bugDescription,\r\n      Version: version,\r\n      IsRepeatable: repeatable,\r\n      Submitter: submitter,\r\n      IsComplete: false,\r\n    };\r\n    SetSubmit(true);\r\n    axios\r\n      .post(\"http://localhost:8080/bugs/add\", newBug)\r\n      .then((_) => console.log(\":posted\"))\r\n      .then((_) =>\r\n        toast({\r\n          title: \"Bug Added.\",\r\n          description: \"The bug was Successfully recorded.\",\r\n          status: \"success\",\r\n          duration: 1500,\r\n          isClosable: true,\r\n        })\r\n      )\r\n      .then((_) => SetSubmit(false))\r\n      .catch((e) =>\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: `${e}`,\r\n          status: \"error\",\r\n          duration: 1500,\r\n          isClosable: true,\r\n        })\r\n      )\r\n      .then((_) => SetSubmit(false));\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      color=\"white\"\r\n      fontFamily=\"Arimo\"\r\n    >\r\n      <FormControl id=\"name\" isRequired>\r\n        <FormLabel>Bug Name</FormLabel>\r\n        <Input\r\n          onChange={(event) => SetBugName(event.target.value)}\r\n          type=\"name\"\r\n        />\r\n      </FormControl>\r\n\r\n      {/* ///////// */}\r\n\r\n      <FormControl id=\"description\" mt={4}>\r\n        <FormLabel>bug description</FormLabel>\r\n        <Input\r\n          onChange={(event) => SetBugDesc(event.target.value)}\r\n          type=\"description\"\r\n        />\r\n      </FormControl>\r\n\r\n      {/* ///////// */}\r\n\r\n      <FormControl id=\"version\" mt={4} isRequired>\r\n        <FormLabel>Version</FormLabel>\r\n        <Select onChange={(event) => SetVersion(event.target.value)}>\r\n          <option style={{ color: \"black\" }}>Select Version</option>\r\n          <option style={{ color: \"black\" }} value={0.1}>\r\n            0.1\r\n          </option>\r\n          <option style={{ color: \"black\" }} value={0.2}>\r\n            0.2\r\n          </option>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {/* ///////// */}\r\n\r\n      <FormControl id=\"Submitter\" isRequired mt={4}>\r\n        <FormLabel>Name</FormLabel>\r\n        <Select onChange={(event) => SetSubmitter(event.target.value)}>\r\n          <option style={{ color: \"black\" }} value=\"\">\r\n            Select Name\r\n          </option>\r\n          <option style={{ color: \"black\" }} value=\"Guy\">\r\n            Guy\r\n          </option>\r\n          <option style={{ color: \"black\" }} value=\"Dana\">\r\n            Dana\r\n          </option>\r\n          <option style={{ color: \"black\" }} value=\"Yuval\">\r\n            Yuval\r\n          </option>\r\n        </Select>\r\n      </FormControl>\r\n      <FormControl as=\"fieldset\" isRequired mt={4}>\r\n        <FormLabel as=\"legend\">Is Repeatable?</FormLabel>\r\n        <RadioGroup>\r\n          <HStack spacing=\"24px\">\r\n            <Radio\r\n              onChange={(event) => SetRepeatable(event.target.value)}\r\n              value=\"yes\"\r\n            >\r\n              Yes\r\n            </Radio>\r\n            <Radio\r\n              onChange={(event) => SetRepeatable(event.target.value)}\r\n              value=\"no\"\r\n            >\r\n              No\r\n            </Radio>\r\n          </HStack>\r\n        </RadioGroup>\r\n      </FormControl>\r\n\r\n      <Button\r\n        isLoading={isSubmitting}\r\n        mt={12}\r\n        mb={4}\r\n        colorScheme=\"green\"\r\n        type=\"submit\"\r\n        letterSpacing=\"1px\"\r\n        onClick={NewDBEntry}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default BugForm;\r\n","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\axios.tsx",[],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\loadingScreen.tsx",[],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\styles\\colors.js",["63"],"export default {\r\n  pink: \"#ff165d\",\r\n  grey: \"#282c34\",\r\n  yellow: \"#E8C547\",\r\n  jet: \"#30323D\",\r\n  independence: \"#4D5061\",\r\n  blue: \"#5C80BC\",\r\n  wolf: \"#CDD1C4\",\r\n  pistachio: \"#8ACB88\",\r\n  coralBlack: \"#4F6272\",\r\n  peach: \"#F4C095\",\r\n  darkpurple: \"#22031F\",\r\n  dirtywhite: \"#EFF6EE\",\r\n  white: \"#FFFCFF\",\r\n  black: \"#300\",\r\n};\r\n",["64","65"],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\Bug List\\openBugList.tsx",[],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\Bug List\\closedBugList.tsx",[],["66","67"],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\sortButton.tsx",[],"C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\addBugButton.tsx",["68","69"],"import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport BugForm from \"../bugform\";\r\n\r\nfunction NewBugButton() {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={onOpen}>New Bug</Button>\r\n      <Modal\r\n        isCentered\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay filter=\"blur(8px)\" />\r\n        <ModalContent bgColor=\"#282c34\" color=\"white\">\r\n          <ModalHeader color=\"white\">Add New Bug</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <BugForm />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewBugButton;\r\n","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\deleteButton.tsx",["70"],"import React from \"react\";\r\nimport { IconButton, useToast } from \"@chakra-ui/react\";\r\nimport { BiTrash } from \"react-icons/bi\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction DeleteButton(props: any) {\r\n  const [isDeleting, SetDelete] = React.useState(false);\r\n  const toast = useToast();\r\n\r\n  function DeleteDBEntry(id: any) {\r\n    SetDelete(true);\r\n    axios\r\n      .delete(`http://localhost:8080/bugs/${id}`)\r\n      .then(() => console.log(\":deleted\"))\r\n      .then(() =>\r\n        toast({\r\n          title: \"Bug Deleted.\",\r\n          description: \"The bug was Successfully Deleted.\",\r\n          status: \"success\",\r\n          duration: 1500,\r\n          isClosable: true,\r\n        })\r\n      )\r\n      .then(() => SetDelete(false))\r\n      .catch((e) =>\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: `${e}`,\r\n          status: \"error\",\r\n          duration: 1500,\r\n          isClosable: true,\r\n        })\r\n      )\r\n      .then(() => SetDelete(false));\r\n  }\r\n\r\n  return (\r\n    <IconButton\r\n      h={\"4vh\"}\r\n      w={\"4vh\"}\r\n      colorScheme=\"red\"\r\n      aria-label=\"delete Button\"\r\n      isLoading={isDeleting}\r\n      fontSize=\"2.5vh\"\r\n      icon={<BiTrash />}\r\n      onClick={() => DeleteDBEntry(props.id)}\r\n    />\r\n  );\r\n}\r\n\r\nexport default DeleteButton;\r\n","C:\\code\\JS\\TypeScript Project\\Bug tool\\bugtool\\src\\components\\buttons\\completeButton.tsx",["71"],"import React from \"react\";\r\nimport { IconButton, useToast } from \"@chakra-ui/react\";\r\nimport { BiCheck } from \"react-icons/bi\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction CompleteButton(props: any) {\r\n  const [isCompleting, SetComplete] = React.useState(false);\r\n  const toast = useToast();\r\n\r\n  function IsCompeted(\r\n    id: any,\r\n    name: any,\r\n    desc: any,\r\n    ver: any,\r\n    rep: any,\r\n    submitter: any\r\n  ) {\r\n    SetComplete(true);\r\n    const newBug = {\r\n      BugName: name,\r\n      BugDescription: desc,\r\n      BugVersion: ver,\r\n      IsRepeatable: rep,\r\n      Submitter: submitter,\r\n      IsCompeted: true,\r\n    };\r\n\r\n    axios\r\n      .post(`http://localhost:8080/bugs/complete/${id}`, newBug)\r\n      .then((_) => console.log(\":completed\"))\r\n      .then(() =>\r\n        toast({\r\n          title: \"Bug Completed.\",\r\n          description: \"The bug was Completed.\",\r\n          status: \"success\",\r\n          duration: 1500,\r\n          isClosable: true,\r\n        })\r\n      )\r\n      .then(() => SetComplete(false))\r\n\r\n      .catch((e) =>\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: `${e}`,\r\n          status: \"error\",\r\n          duration: 1500,\r\n          isClosable: true,\r\n        })\r\n      )\r\n      .then(() => SetComplete(false));\r\n  }\r\n\r\n  return (\r\n    <IconButton\r\n      colorScheme=\"green\"\r\n      aria-label=\"Complete Button\"\r\n      isLoading={isCompleting}\r\n      fontSize=\"3vh\"\r\n      icon={<BiCheck />}\r\n      onClick={() => {\r\n        IsCompeted(\r\n          props.id,\r\n          props.BugName,\r\n          props.BugDescription,\r\n          props.Version,\r\n          props.IsRepeatable,\r\n          props.Submitter\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CompleteButton;\r\n",["72","73"],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":6,"column":3,"nodeType":"80","messageId":"81","endLine":6,"endColumn":19},{"ruleId":"78","severity":1,"message":"82","line":15,"column":3,"nodeType":"80","messageId":"81","endLine":15,"endColumn":8},{"ruleId":"83","severity":1,"message":"84","line":1,"column":1,"nodeType":"85","endLine":16,"endColumn":3},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"86"},{"ruleId":"76","replacedBy":"87"},{"ruleId":"78","severity":1,"message":"88","line":7,"column":3,"nodeType":"80","messageId":"81","endLine":7,"endColumn":14},{"ruleId":"78","severity":1,"message":"89","line":13,"column":10,"nodeType":"80","messageId":"81","endLine":13,"endColumn":17},{"ruleId":"78","severity":1,"message":"89","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":17},{"ruleId":"78","severity":1,"message":"89","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":17},{"ruleId":"74","replacedBy":"90"},{"ruleId":"76","replacedBy":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'FormErrorMessage' is defined but never used.","Identifier","unusedVar","'Stack' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["92"],["93"],"'ModalFooter' is defined but never used.","'NavLink' is defined but never used.",["92"],["93"],"no-global-assign","no-unsafe-negation"]